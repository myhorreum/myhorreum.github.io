03/10/20 (day 1) :

I came in 15 minutes early and met with Thomas, my supervisor and one of the people who interviewed me for the position. I was taken to the
office I would be doing my work in and introduced to the laptop (Dell) which I would be doing all work on. I was guided through the process of
setting up my uhtasi email specific and viber messaging accounts.

I was also introduced to my primary task which was to move many TASI web domains under the control of a web hosting panel. Thomas told me that 
the project should be done within a month. I was tasked with performing research on potential panels. I looked through paid panels such as cPanel
and Hosting Controller, as well as open source options such as Ajenti, VestaCP, and Webmin. I created a spreadsheet comparing and contrasting
various attributes the panels had with each other.

We ultimately chose to try out Webmin first. I also was interested in Hosting Controller, but had trouble finding info on how many domains were
allowed on its service as well as the cost of the service. I emailed them inquiring about it as well as planned to potentially test a demo of 
their service later on down the line (after working with Webmin).

03/11/20 (day 2) :

The night before day 2 I did further research on Webmin and found that Virtualmin is actually the web hosting panel service of Webmin. I reported
this info to Thomas and we decided to work with Virtualmin. Interestingly, the Virtualmin download also includes Webmin functionality (you can
toggle between Webmin and Virtualmin). 

Before any downloads, Thomas introduced me to TASI's vCenter. vCenter Server is the centralized management utility for VMware, and is used to manage
virtual machines, multiple ESXi hosts, and all dependent components from a single centralized location. The VMWare is used to create template Virual
Boxes for use. TASI uses Virtual Boxes to test software they have interest in before deciding to use it. In this case we created a Linux CentOS template. 
The template generates an IP address that can be accessed from other computers. I used this IP address to work in the box from my workspace laptop. 

Back on my laptop, I went to VMWare (had to disable the block on Flash in Chrome, also what will happen to VMWare once Chrome abandones Flash??) in
order to work with the Virtual Box environment. Note to log into VMWare I used a uhtasi account to gain access. I connected to the VMware remote
console which essentially connected my monitor to the server. My immediate goal was to get the networking going.

Since I was working on CentOS, I used the terminal command nmtui to set the IP address of our Virtual Box to a specific value and the netmask as
255.255.255.0. After changing this info, you must reset the network using the command systemctl restart network.service. 
To test if the box had internet I pinged 8.8.8.8 (Google).

Once the network was set up I used the IP address of the box to log in through PuTTY. I then changed the hostname and the root password to one of my choice 
using hostnamectl set-hostname your-new-hostname and sudo passwd root.

03/12/20 (day 3) :

My primary task for the day was to install Virtualmin/Webmin and test it out. Through PuTTY I tried to use wget to get the download script, however
wget was not available in PuTTY. To solve this, I used sudo yum install wget. However to complicate things further, yum was not working. I was
getting Yum Command Fails with “Another app is currently holding the yum lock”. I used Google to help solve this. It told me to use the ‘ps -ef’ command
to check for the PID being occupied by yum (it will be shown next to grep). All I had to do to fix this was use kill -9 13023 to stop the hold-up.

wget was finally working (note I did not go with curl because it was not getting me the script effectively). I then used sh install.sh to run the 
install script. Another problem did arise during the installation process. I was getting the message that my hostname server was not fully qualified.
I did research on FQDN (Fully Qualified Domain Name) and learned that I needed to update the /etc/hosts file. I had to put in the hostname and IP
of the server we had set up for Virtualmin use (the one we were currently logged in to PuTTY with). I updated the file with vi. I want to mention
that I exited vi without properly saving before editing how I wanted to; this auto-created a /etc/hosts.swp file. When using vi on the /etc/hosts
file, it gives the option of loading the /etc/hosts.swp file. To rid of this, simply use rm to delete the swap file. Also be sure your hostname 
matches the hostname in the file that you do vi on, or else it will not work.

Virtualmin was finally installed and we got to test it with a web address generated from our IP address. After experimenting with Virtualmin and 
Webmin, my manager and I were not making too much progress. We were confused on exactly what Virtualmin was trying to do. All we wanted was a place
to centrally manage existing web servers, while Virtualmin seemed to simplify new deployments of domains by auto creating a lot of stuff, 
overcomplicating a lot of what we were wanting to do. It seemed we might be getting more than we bargained for. However, at the end of the day,
before deciding to move on from Virtual/Webmin, we opted to do further research on them to see if it was still possible to do we wanted to do 
initially.

03/16/20 (day 4) :

Since Webmin/Virtualmin seemed to be too bulky for our needs, I recommended using ISPConfig. The installation process for ISPConfig was a bit more
lengthy, however I pushed through it much faster this time due to my experience installing Virtualmin. Towards the end of my work session, ISPConfig
was up and running and I added a test server to the domain listing. Thomas wants to see if Apache server integration is possible.

At home, I did further research on ISPConfig. I payed the $5 fee for the ISPConfig manual, and began studying it. It is apparent that 
"admin, clients, and resellers" are a big aspect of ISPConfig. These are three customizable user levels offered by ISPConfig. As of right now, it
does not seem like we will have use for client and reseller roles, though they do seem interesting. We should focus on admin because that gives full
control over the system. Currently I am studying 4.5.4 Domains section of the manual.

03/17/20 (day 5) :

I sent the ISPConfig manual to Thomas. He spent some time studying it before ultimately coming to the conclusion that it was very similar to Webmin.
Therefore, we deemed it best to abandon ISPConfig. Thomas told me to research Ansible, since Miguel had used it in the past. Ansible is a IT 
configuration and management tool used in organizing and even automating tasks.

At home, I looked into Ansible more. I found it had a GUI version called Ansible Tower created in response to the community wanting one. I would
present this info to Thomas tomorrow.

03/18/20 (day 6) :

I told Thomas about Ansible Tower and he believed it came with a price to use, so he told me to look at "regular" Ansible to see if I could find a
work-around, perhaps with plug-ins. I told him that Red Hat had taken over Ansible and that it does not seem to have a free option anymore. Finally
Thomas went to Miguel to figure out exactly what he wants in regards to web hosting control. It seemed that not even Miguel knew totally what he
wanted, he had no concrete idea in place. So, while Miguel figures that out, Thomas told me to move on to a new project: Windows Server Update Services.
Windows Server Update Services (WSUS) enables administrators to manage the distribution of updates and hotfixes released for Microsoft products to 
computers in a corporate environment.

I did research on this while waiting on Jose to configure the environment for me to work in.

03/19/20 (day 7) :

Today I was to configure and test out WSUS. I would do testing on a virtual server created in vCenter. I connected to this server through Remote 
Desktop Connection, which is like giving me access to another computer (in this case server). This server had WSUS installed by Jose. In WSUS, I 
was able to see the created group WSUSTest which had several computers from the TASI offices. Following an online guide, I checked for updates for
these computers and then updated them. I attempted to generate a report but could only generate the basic Computer one, not the detailed report option.
It seemed that WSUS had issues with timing out. I used Event Viewer and found the log of the connection failure. I Googled the Error: Connection Error,
Reset Server Node issue and found it to be a fairly common issue online. One solution would be to go into IIS (Internet Information Services) and
give WSUS access to unlimited memory. For some reason, the server was blank. I think Thomas then tried to move me to an admin role, however it was
still blank. I then searched IIS, right clicked it, and selected to access it as administrator, which then gave me the server. I finally gave WSUS
more memory.

However I still was getting the same issue with connection. Another guide told me to remove the WSUS Adminstration file under Sites in IIS. This did
not work either and actually seemed to break WSUS completely (the connection error was now permanent). I tried to reset the file (it was unlikely
deleted, so I would have to find and repoint it), but I had too much difficulty. I wanted to revert to a previous vCenter snapshot, but Thomas had
not taken one. Jose ended up reconfiguring it back to the original state and took a snapshot. I was now to rework with this again tomorrow.

03/20/20 (day 8) :

Along with giving WSUS unlimited memory in IIS, I also deleted the wsus file under %appdata%\Microsoft\MMC\. This seemed to work, however I was still
experiencing intermittent Error Connection incidents. I fixed this by going back to IIS and setting the Status of WsusPool to Stopped, waiting a bit
(you may get an error notification) and then setting it to Started again. This allowed me to view Updates and Approve them. Also when viewing Computers,
I am able to click on an individual computer and view its Detailed Computer Status Report. This shows the history record of Updates passed to this computer,
and shows the Approval, and the Status on whether it was Not Installed or Downloaded. This brought up the question as to when the Updates will be downloaded.
Are they put in a queue and done based on time? 

Also I want to mention that if you go to Updates and individually click an update, you can view its Detailed Update Status Report. I think what was causing
the crash was that I was previously trying to view them in bulk, which was overwhelming the connection and causing a time-out. 

Lastly, I looked into automating the update install process. I went to Options in the WSUS GUI and went into Automatic Approvals. I created a new rule
called WSUS Test Custom-Auto. I also noticed that within that rule I could customize update download deadlines. I set this to download "the next 
day after the approval at 3:00AM". I assume this will cause the download to be force installed at that time. Link with info :

https://docs.microsoft.com/de-de/security-updates/windowsupdateservices/18127631

However, unfortunately, when clicking the Run Rule, I get a Error Connection timeout after a bit of waiting. 